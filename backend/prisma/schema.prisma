generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  password     String
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  workspaces   Workspace[]
  tasks        Task[]
  comments     Comment[]
  notifications Notification[]
  files        File[]
  WorkspaceMember WorkspaceMember[]
}

model Workspace {
  id          String      @id @default(cuid())
  name        String
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     String
  projects    Project[]
  members     WorkspaceMember[]
  createdAt   DateTime    @default(now())
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  role        String   // 'owner', 'admin', 'member'

  @@unique([userId, workspaceId])
}

model Project {
  id           String     @id @default(cuid())
  title        String
  description  String?
  workspace    Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  columns      Column[]
  createdAt    DateTime   @default(now())
}

model Column {
  id         String   @id @default(cuid())
  name       String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  tasks      Task[]
  position   Int
}

model Task {
  id         String   @id @default(cuid())
  title      String
  description String?
  column     Column   @relation(fields: [columnId], references: [id])
  columnId   String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  labels     TaskLabel[]
  comments   Comment[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String
  tasks     TaskLabel[]
}

model TaskLabel {
  id      String  @id @default(cuid())
  task    Task    @relation(fields: [taskId], references: [id])
  taskId  String
  label   Label   @relation(fields: [labelId], references: [id])
  labelId String

  @@unique([taskId, labelId])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  uploadedAt DateTime @default(now())
}
